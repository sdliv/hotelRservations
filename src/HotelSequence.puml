@startuml

class Administrator extends Person {

}

class Person {
  -String FirstName;
  -String lastName;
}

class Controller implements IReturnView {

}

class Role {
  -String name;
}

class Admin extends Role {

}
class CUser extends Role {

}

class PowerUser extends Role {

}

interface ILogin {
  UserView login(Person person)
}

interface IView {
}

interface IReturnView {
  UserView returnView()
}

class CustomerController extends Controller {
  - Customer customer;
  - ReservationImpl reservation;
  CustomerController()
}

class AdminController extends Controller {

}

class EmployerController extends Controller {

}

class Employee extends Person {
}

class Customer extends Person {

}

class AdminView extends UserView {

}

class CustomerView extends UserView {

}

class EmployeeView extends UserView {

}

class ErrorView extends UserView {

}

class UserView {

}

class LoginImpl implements ILogin {
  UserView login(Person person);
}

class Room {
  -int qualityLevel;
  -int beds;
  -int roomNumber;
  -boolean smokingStatus;
  -boolean availability;
  -double price;
  -String description;
  -int reservationNumber;
}

class ReservationImpl implements IReservation {
  -boolean reservationStatus;
  -double feeApplied;
  -Room room;
  String reserve()
  String cancel()
}

class RemoteOperation {
  Registry registry;
  main()
}

class ReturnViewFactory {
    IReturnView returnView(String name);
}

interface HotelOperation {
    Role execute();
}

class LoginOperation implements HotelOperation {

}

class HotelOperationExecutor {

}

class Reservation {
    Map<String, Object> getReservationDetails();
}

class CustomerReservation extends Reservation {

}

abstract class ReservationBuilder {
    addRoom(Room room);
    addReservationNumber();
    createReservation();
}

class CustomerReservationBuilder() extends ReservationBuilder {

}

class CustomerClient {
  main()
}

class CustomerView {
  void printReservationDetails(Customer, ReservationImpl)
}


CustomerClient -> RemoteReservation: reserve()
CustomerClient -> RemoteReservation: cancel()
Administrator "1" *-- "many" Person : contains
Employee "1" *-- "many" Person : contains
Customer "1" *-- "many" Person : contains
Customer "1" *-- "1" Room
@enduml